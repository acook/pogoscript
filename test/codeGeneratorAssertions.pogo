Memory Stream = require '../lib/memorystream'.Memory Stream
terms = require '../lib/parser/codeGenerator'.code generator ()
should = require 'should'

(term) should generate (source) generated by (generate) (print: false) =
    stream = new (Memory Stream)
    generate (term, stream, new (terms.Symbol Scope))

    code = stream.to string ()

    if (print)
        console.log (code)

    should.equal (code, source)
    

global.(term) should generate expression (source, options) =
    (term) should generate (source) generated by @(term, stream, scope)
        term.generate java script (stream, scope)
    (options)

global.(term) should generate statement (source, options) =
    (term) should generate (source) generated by @(term, stream, scope)
        term.generate java script statement (stream, scope)
    (options)

global.(term) should generate statements (source, options) =
    (term) should generate (source) generated by @(term, stream, scope)
        term.generate java script statements (stream, scope, in closure: true)
    (options)

global.(term) should generate global statements (source, options) =
    (term) should generate (source) generated by @(term, stream, scope)
        term.generate java script statements (stream, scope, global: true)
    (options)

global.(term) should generate module (source, options) =
    (term) should generate (source) generated by @(term, stream)
        term.generate java script module (stream)
    (options)
